from fastapi import FastAPI, HTTPException, Request, Depends
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from sqlalchemy.orm import Session
from dotenv import load_dotenv
import requests
from config import (
    REFERRAL_AMOUNT,
    YOOKASSA_SECRET_KEY,
    MAHIN_URL,
    YOOKASSA_SHOP_ID
)

from yookassa import Payment, Configuration
import logging
import os
import aiohttp
import uvicorn
from database import get_db, create_payout, get_user, mark_payout_as_notified, create_referral

load_dotenv()

print("YOOKASSA_SHOP_ID:", os.getenv("YOOKASSA_SHOP_ID"))
print("YOOKASSA_SECRET_KEY:", os.getenv("YOOKASSA_SECRET_KEY"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
logger.info("Account ID: %s", Configuration.account_id)
logger.info("Secret Key: %s", "SET" if Configuration.secret_key else "NOT SET")

# FastAPI application
app = FastAPI()

class UserRegisterRequest(BaseModel):
    telegram_id: str
    username: str
    referrer_id: str

class PaymentRequest(BaseModel):
    amount: float
    description: str
    telegram_id: str

@app.post("/pay")
async def pay(request: PaymentRequest, db: Session = Depends(get_db)):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID: %s", request.telegram_id)

    user = get_user(db, request.telegram_id)
    if not user:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID %s –Ω–µ –Ω–∞–π–¥–µ–Ω.", request.telegram_id)
        raise HTTPException(status_code=400, detail="User not found")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa
    try:
        payment_response = await create_payment(request.amount, request.description, request.telegram_id)
        logger.info("–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID %s", request.telegram_id)
        return payment_response
    except HTTPException as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID %s: %s", request.telegram_id, e.detail)
        raise HTTPException(status_code=e.status_code, detail=e.detail)

async def create_payment(amount: float, description: str, telegram_id: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º yookassa SDK."""
    payment_data = {
        "amount": {
            "value": f"{amount:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": f"tg://resolve?domain=AiM_Pay_Bot"
        },
        "capture": True,
        "description": description,
        "metadata": {
            "telegram_id": telegram_id
        }
    }
    
    try:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID: %s", telegram_id)
        payment = Payment.create(payment_data)  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ yookassa SDK
        confirmation_url = payment.confirmation.confirmation_url
        if confirmation_url:
            logger.info("–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. Confirmation URL: %s", confirmation_url)
            return {
                'confirmation': {
                    'confirmation_url': confirmation_url  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                }
            }
        else:
            logger.error("–û—à–∏–±–∫–∞: Confirmation URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç YooKassa.")
            raise HTTPException(status_code=400, detail="No confirmation URL found")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: %s", str(e))
        raise HTTPException(status_code=500, detail=f"Failed to create payment: {str(e)}")
    
@app.post("/payment_notification")
async def payment_notification(request: Request, db: Session = Depends(get_db)):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –æ—Ç YooKassa."""
    data = await request.json()
    payment_id = data.get("id")
    status = data.get("status")
    user_telegram_id = data.get("metadata", {}).get("telegram_id")

    if status == "succeeded" and user_telegram_id:
        user = get_user(db, user_telegram_id)
        if user:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.payment_status = "paid"
            db.commit()

            # –í—ã–ø–ª–∞—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—É, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if user.referrer_id:
                referrer = get_user(db, user.referrer_id)
                if referrer:
                    create_payout(db, referrer.id, REFERRAL_AMOUNT)  # –í—ã–ø–ª–∞—Ç–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞

            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Referral
            create_referral(db, user.referrer_id, user.id)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–ª–∞—Ç—ã
            mark_payout_as_notified(db, payment_id)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ mahin.py –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notify_url = f"{MAHIN_URL}/notify_user"
            notification_data = {
                "telegram_id": user_telegram_id,
                "message": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ, –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∫—É—Ä—Å! üéâ"
            }
            response = requests.post(notify_url, json=notification_data)

            if response.status_code == 200:
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID %s —É—Å–ø–µ—à–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω —á–µ—Ä–µ–∑ –±–æ—Ç–∞.", user_telegram_id)
                return {"message": "Payment processed and user notified successfully"}
            else:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞.")
                raise HTTPException(status_code=500, detail="Failed to notify user through bot")

    raise HTTPException(status_code=400, detail="Payment not processed")

# Database session dependency
@app.middleware("http")
async def db_session_middleware(request: Request, call_next):
    request.state.db = get_db()
    response = await call_next(request)
    return response

@app.api_route("/", methods=["GET", "HEAD"])
async def payment_notification(request: Request):
    return JSONResponse(content={"message": "–°—É–ø–µ—Ä"}, status_code=200, headers={"Content-Type": "application/json; charset=utf-8"})

async def run_fastapi():
    port = int(os.getenv("PORT", 8000))  # –ü–æ—Ä—Ç –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ 8000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    uvicorn.run(app, host="0.0.0.0", port=port)